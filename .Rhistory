alist
alist[['mark']]
alist$Test<-NULL
alist[['mark']]
alist$Grade<-"A+"
alist()
alist[['mark']]
alist([['mark']])
str(alist)
list_data<-list(4.23, "Blue")
print(list_data)
str(alist)
str(list_data\)
str(list_data)
list_data$Grade<-"A+"
str(list_data)
avector<-unlist(list_data)
avector
list_data[["newData"]]<-2022
str(list_data)
avector<-unlist(list_data)
avector
list_data[["Blue"]]<-NULL
str(list_data)
print(list_data)
list_data[[2]]<-NULL
print(list_data)
str(list_data)
avector<-unlist(list_data)
avector
m1<-matrix(1:6, 3, 2)
m1
m2<-matrix(1:6, 3, 2, byRow=T)
m2
m2<-matrix(1:6, 3, 2, byrow=T)
m2
m3<-matrix(1:6, 3, 2, byrow=C)
m1[1,2]
m1[,2,drop=F]
m1[m1[,2]<5]
m1[m1[,2]<5, 2]
m1[m1[,2]<5, 2]<-88
m1
m1
m1[1,2]<-4
m1
m1
m1[,3]
m1[3]
m1[3,]
m1[[,3] = 6]
m1[.3 = 6]
m1[,3 = 6]
m1[,3 == 6]
m1[,3]
m1[,3]
m1
m1[m1[3,]]
m1[3, m1[3,]]
m1[3, m1[3,] == 6]<-90
m1
m1[m1[3,] == 6]<-90
m1
m1[m1[3,] == 6]<-100
m1
m1[m1[3,] == 6]
m1[3, m1[3,] == 6]
m1
m2
dimnames(m2)<-list(paste0("Record", 1:3), c("M", "N"))
m2
colsnames(m2)<-c("AA", "BB")
colsname(m2)<-c("AA", "BB")
colnames(m2)<-c("AA", "BB")
m2
nrow(m2)
ncol(m2)
m1
dim(m1)<-c(2,3)
m1
dim(m1)<-c(3,2)
m1
m1
m1<-rbind(m1, c(11,22))
m1
dimnames(m1)<-list(paste0("Record", 1:4), c("A", "B"))
m1
m3<-matrix(diag(5), 5)
m3
m4<-matrix(1:16, 4, 4)
m4
m4<-matrix(1:16, 4, 4, byrow=T)
m4
m4[m4[,4] > 7, ]
m4[m4>7]
m4[m4>7, drop=F]
mtcars
view(mtcars)
View(mtcars)
Summary(mtcars)
mtcars[with(mtcars, am==0),]
sub1<-subset(mtcars, qsec>17, select=c(mpg, hp, qsec))
sub1
b<-function(x) { return (c(x, x*x)) }
sapply(b)
b<-function(x) { return (c(x, x*x, x*x*x)) }
sapply(1:5, b)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$am, max)
df3<-data.frame()
df3<-data.frame()
df3<-data.frame(
team=c("A","A","B","B","B","C","D"),
poinst=c(4,7,8,8,8,9,10),
rebounds=c(3,3,4,4,6,7,7),
)
df3<-data.frame(
team=c("A","A","B","B","B","C","D"),
poinst=c(4,7,8,8,8,9,10),
rebounds=c(3,3,4,4,6,7,7)
)
print(df3)
df3$Name<-ifelse(df3$team=="A", "Apple")ifelse(df3$team=="B", "Boy"),ifelse(df3$team=="C", "Cat", "Dragon")
df3<-data.frame(
team=c("A","A","B","B","B","C","D"),
poinst=c(4,7,8,8,8,9,10),
rebounds=c(3,3,4,4,6,7,7)
)
print(df3)
df3$Name<-ifelse(df3$team=="A", "Apple")ifelse(df3$team=="B", "Boy"),ifelse(df3$team=="C", "Cat", "Dragon")
df3<-data.frame(
team=c("A","A","B","B","B","C","D"),
poinst=c(4,7,8,8,8,9,10),
rebounds=c(3,3,4,4,6,7,7)
)
print(df3)
df3$Name<-ifelse(df3$team=="A", "Apple")ifelse(df3$team=="B", "Boy"),ifelse(df3$team=="C", "Cat", "Dragon")
switch("text-align", "margin-left" = "5px", "margin-right" = "5px", "text-align" = "right")
switch("text-align", "margin-left" = "5px", "margin-right" = "5px", "text-align" = "unknown value")
q<-list(1,2,3,4,5)
length(q)
q[[2]]
q[2
q[2]
q[2]
append(q, 19)
qe[[6]]<- 20
q[[6]]<- 20
q
as.list(sort(unlist(q)))
install.packages(c("bslib", "callr", "digest", "evaluate", "jsonlite", "knitr", "markdown", "pkgload", "R.utils", "rmarkdown", "roxygen2", "sass", "styler", "vctrs", "xfun", "yaml"))
clear
clear()
a n <- 0 while (n**3 < 2000){ n = n + 1 } print(n) # b total <- 0 for (i in 1:25){ total = total + i/(25-i+1) } print(round(total),2) # c Fibonacci <- numeric(10) Fibonacci[1] <- Fibonacci[2] <- 1 for (i in 3:10){ Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1] } Fibonacci
a <- 0 while (n**3 < 2000){ n = n + 1 } print(n) # b total <- 0 for (i in 1:25){ total = total + i/(25-i+1) } print(round(total),2) # c Fibonacci <- numeric(10) Fibonacci[1] <- Fibonacci[2] <- 1 for (i in 3:10){ Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1] } Fibonacci
n <- 0 while (n**3 < 2000){ n = n + 1 } print(n) # b total <- 0 for (i in 1:25){ total = total + i/(25-i+1) } print(round(total),2) # c Fibonacci <- numeric(10) Fibonacci[1] <- Fibonacci[2] <- 1 for (i in 3:10){ Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1] } Fibonacci
n <- 0
while (n**3 < 2000){
n = n + 1
}
print(n)
# Questions 5
# a
n <- 0
while (n**3 < 2000){
n = n + 1
}
print(n)
# b
total <- 0
for (i in 1:25){
total = total + i/(25-i+1)
}
print(round(total),2)
# c
Fibonacci <- numeric(10)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) {
Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
}
Fibonacci
c. year<-2020
c. year<-2020
year<-2020
if (year%%400 == 0) {
if (year%%100 != 0) {
if (year%%4 == 0){
print("The year is a leap year")
} else {
print("The year is not a leap year")
} else {
if (year%%400 == 0) {
if (year%%100 != 0) {
if (year%%4 == 0){
print("The year is a leap year")
} else {
print("The year is not a leap year")
} else {
if (year400 == 0) {
if (year100 != 0) {
if (year4 == 0) {
print("The year is a leap year");
} else {
print("The year is not a leap year");
}
} else {
print("The year is not a leap year");
}
} else {
print("The year is not a leap year");
}
if (year%%400 == 0) {
if (year%%100 != 0) {
if (year%%4 == 0) {
print("The year is a leap year");
} else {
print("The year is not a leap year");
}
} else {
print("The year is not a leap year");
}
} else {
print("The year is not a leap year");
}
install.packages("stringr")
nrow(na.omit(df20))
getfirstlast<-function (a){
return(sprintf("first: %s, last: %s",as.character(a[1]),as.character(a[length(a)])))
}
getfirstlast<-function (a){
return(sprintf("first: %s, last: %s",as.character(a[1]),as.character(a[length(a)])))
}
getfirstlast<-function (a){
return(sprintf("first: %s, last: %s",as.character(a[1]),as.character(a[length(a)])))
}
print(getfirstlast())
ageFirstLast <-function (a) {
return(sprintf("first: %s, last: %s",as.character(a[1]),as.character(a[length(a)])))
}
print(ageFirstLast)
ageFirstLast <-function (a) {
return(sprintf("first: %s, last: %s",as.character(a[1]),as.character(a[length(a)])))
}
print(ageFirstLast())
print(ageFirstLast('hello'))
print(ageFirstLast('hello again'))
install.packages(c("htmltools", "jsonlite", "roxygen2"))
install.packages(c("bslib", "digest", "evaluate", "rmarkdown", "tinytex"))
x<-y
y<-c(4L,TRUE)
print(y<-c(4L,TRUE))
print(typeof(y<-c(4L,TRUE)))
x<-sample(50,10,replace=FALSE) + 5
print(x<-sample(50,10,replace=FALSE) + 5)
print(x<-sample(50,10,replace=FALSE))
print(typeof(X<-c(30L, "42 ", TRUE)))
num.1<- 1
print(num.1)
num 1<- 1
1num<- 1
num_1_2<- 1
print(num_1_2)
print(a<-seq(from=2.3, to=6, by=1))
print(a<-c(2.3:5.3, 1))
print(a<--1*seq(from=-2.3, to=-6, by=-1))
print(a<-c(2.3:5.3))
print(rnorm(10, sd=1))
print(set.seed(10))
set.seed(10)
# Creating data set of random values
x <- rnorm(15)
x
# Setting seed again for another data set
set.seed(10)
# Creating another data set
y <- rnorm(15)
y
# Checking if both are equal
identical(x, y)
print(rnorm(10, sd=1))
print(rnorm(10, sd=1))
set.seed(10)
# Creating data set of random values
x <- rnorm(10, sd=1)
x
# Setting seed again for another data set
set.seed(10)
# Creating another data set
y <- rnorm(10, sd=1)
y
# Checking if both are equal
identical(x, y)
FOURS <- matrix(
c(4, 4, 4, 4),
nrow = 2,
ncol = 2)
print(FOURS)
X<-data.frame(num=5:8, bar=c())
X<-data.frame(num=5:8, bar=c())
X<-data.frame(num=5:8, bar=c("a","b", "c", "d"))
print(row.names(x))
print(x)
m<-matrix(rep(12:5,time=2), nrow= 3, ncol=4)
m<-matrix(rep(12:5,time=2), nrow= 3, ncol=4)
print(m[1,2])
print(m[1,4])
print(m[3.2])
print(m[3,2])
print(m[2,1])
v<-list(bob = c(2,3,5), john = c("aa", "bb", "cc", "dd"), mike=c(TRUE, FALSE))
print(v)
print(typeof(v))
print(typeof(list(bob = c(2,3,5)))
list(bob = c(2,3,5)
x<-list(bob = c(2,3,5)
)
print(typeof(list(bob = c(2,3,5))))
v<-list(bob = c(2,3,5), john = c("aa", "bb", "cc", "dd"), mike=c(TRUE, FALSE))
print(typeof(c("aa", "bb", "cc", "dd")))
print(typeof(c(TRUE, FALSE)))
print(typeof(c(TRUE, FALSE)))
print(typeof(c(2,3,5)))
v<-list(bob = c(2,3,5), john = c("aa", "bb", "cc", "dd"), mike=c(TRUE, FALSE))
print(v)
print(v["mike"])
print(v$"mike")
print(v[[3]])
print(v[3])
print(v[[3]])
print(v[3])
print(v[[3]])
print(v[3])
print(v[[3]])
print(v$"mike")
print(v["mike"])
x<-c(1,2,3)
y<-c(7,8,9)
print(x)
print(y)
print(rbind(x,y))
X<-data.frame(num=5:8, bar=c("a","b", "c", "d"))
print(row.names(1 2 3 4))
print(row.names(x))
x<-data.frame(num=5:8, bar=c("a","b", "c", "d"))
print(row.names(x))
x<-sample(50,10,replace=FALSE) +5
print(x)
iris
install.packages(c("cli", "purrr"))
iris
data(iris)
library(readxl)
Wine_Quality_Data <- read_excel("C:/Users/User/Downloads/Wine_Quality_Data.csv")
Wine_Quality_Data
View(Wine_Quality_Data)
read.csv("wine.csv")
library(readxl)
wine <- read_excel("C:/Users/User/Downloads/wine.csv")
read.csv("C:\Users\User\Downloads")
read.csv('C:\Users\User\Downloads')
read.csv('wine.csv')
read.csv("C:/Users/User/Downloads/Wine_Quality_Data.csv")
read.csv("C:/Users/User/Downloads/wine.csv")
wine_data <- read.csv("C:/Users/User/Downloads/wine.csv")
data(wine_data)
wine_data <- read.csv("C:/Users/User/Downloads/wine.csv")
wine_data
data(wine_data)
str(wine_data)
set.seed(9850)
hist(wine_data)
iris
hist(wine_data$alcohol)
gp<-runit(nrow(wine_data))
gp<-runif(nrow(wine_data))
wine_dzul <- wine_data[order(gp),]
str(wine_data)
wine_data <- wine_data[order(gp),]
str(wine_data)
head(wine_data)
head(wine_data, 10)
str(wine_data)
summary(wine_data[,c(1,2,3,4)])
normalize <- function(x){return((x-min(x))/(max(x) - min(x)))}
normalize(c(1,2,3,4,5))
wine_data_n<-as.data.frame(lappy(iris[,c(1,2,3,4)], normalize))
wine_data_n<-as.data.frame(lapply(iris[,c(1,2,3,4)], normalize))
summary(iris_n)
summary(wine_data_n)
str(wine_data)
wine_data_train<-wine_data_n[1:129,]
wine_data_test<-wine_data_n[130:150,]
wine_data_train_target<-wine_data[1:129,5]
wine_data_test_target<-wine_data[130:150,5]
require(class)
require(class)
sqrt(150)
m1<-knn(train=wine_data_train, test=wine_data_test, cl=wine_data_train_target, k=13)
table(wine_data_test_target, m1)
wine_data
table(wine_data_test_target, m1)
data(wine_data)
str(wine_data)
set.seed(9850)
gp<- runif(nrow(wine_data))
print(gp)
wine_data <- wine_data[order(gp),]
str(wine_data)
head(wine_data)
head(wine_data, 10)
str(wine_data)
summary(wine_data[,c(1,2,3,4)])
normalize <- function(x){return( (x-min(x)) / (max(x) - min(x)) )}
normalize(c(1,2,3,4,5))
wine_data_n <- as.data.frame(lapply(iris[,c(1,2,3,4)], normalize))
summary(wine_data_n)
wine_data_n <- as.data.frame(lapply(wine_data[,c(1,2,3,4)], normalize))
summary(wine_data_n)
str(wine_data)
wine_data_train<-wine_data_n[1:129,]
wine_data_test<-wine_data_n[130:150,]
wine_data_train_target<-wine_data[1:129,5]
wine_data_test_target<-wine_data[130:150,5]
require(class)
sqrt(150)
m1<-knn(train=wine_data_train, test=wine_data_test, cl=wine_data_train_target, k=13)
table(wine_data_test_target, m1)
iris
wine_data
wine_data_train<-wine_data_n[1:129,]
wine_data_test<-wine_data_n[130:150,]
wine_data_train_target<-wine_data[1:129,4]
wine_data_test_target<-wine_data[130:150,4]
require(class)
sqrt(150)
m1<-knn(train=wine_data_train, test=wine_data_test, cl=wine_data_train_target, k=13)
table(wine_data_test_target, m1)
m1<-knn(train=wine_data_train, test=wine_data_test, cl=wine_data_train_target, k=5)
table(wine_data_test_target, m1)
m1<-knn(train=wine_data_train, test=wine_data_test, cl=wine_data_train_target, k=4)
table(wine_data_test_target, m1)
iris
iris_train <- iris_n[1:129, ]
set.seed(9850)
gp<- runif(nrow(iris))
iris<- iris[order(gp),]
str(iris)
summary (iris[,c(1,2,3,4)])
normalize<- function(x){return((x-min(x))/ (max(x) - min(x)))}
normalize(c(1,2,3,4,5))
iris_n<-as.data.frame(lapply(iris[,c(1,2,3,4)], normalize))
iris_train <- iris_n[1:129, ]
iris_test<-iris_n[130:150, ]
iris_train_target<- iris[1:129,5]
iris_test_target<- iris[130:150,5]
require(class)
sqrt(150)
m1<- knn(train=iris_train, test=iris_test, cl=iris_train_target, k=13)
table(iris_test_target, m1)
iris\
iris
set.seed(9850)
gp<-runif(nrow(wine_data))
wine_dzul_iris <- wine_data[order(gp),]
wine_dzul_gp<-runif(nrow(wine_data))
wine_dzul_iris <- wine_data[order(wine_dzul_gp),]
normalize <- function(x){return((x-min(x))/(max(x) - min(x)))}
normalize(c(1,2,3,4,5))
wine_data_n<-as.data.frame(lappy(wine_dzul_iris[,c(1,2,3,4)], normalize))
wine_data_n<-as.data.frame(lapply(wine_dzul_iris[,c(1,2,3,4)], normalize))
iris_train <- wine_dzul_n[1:129, ]
wine_data_n<-as.data.frame(lapply(wine_dzul_iris[,c(1,2,3,4)], normalize))
iris_train <- wine_data_n[1:129, ]
iris_test <- wine_data_n[130:150, ]
iris_train_target<- wine_data_n[1:129,5]
iris_test_target<- wine_data_n[130:150,5]
require(class)
sqrt(150)
m1<- knn(train=iris_train, test=iris_test, cl=iris_train_target, k=13)
m1<- knn(train=iris_train, test=iris_test, cl=iris_train_target, k=13)
iris_train <- wine_data_n[1:129,]
iris_test <- wine_data_n[130:150,]
iris_train_target<- wine_data_n[1:129,5]
iris_test_target<- wine_data_n[130:150,5]
require(class)
sqrt(150)
m1<- knn(train=iris_train, test=iris_test, cl=iris_train_target, k=13)
wine_data_train<-wine_data_n[1:129,]
wine_data_test<-wine_data_n[130:150,]
wine_data_train_target<-wine_data[1:129,5]
wine_data_test_target<-wine_data[130:150,5]
require(class)
sqrt(150)
m1<-knn(train=wine_data_train, test=wine_data_test, cl=wine_data_train_target, k=13)
table(wine_data_test_target, m1)
install.packages(c("highr", "xfun"))
setwd("C:\\Users\\User\\Downloads\\Master Data Science\\WQD7001 PRINCIPLES OF DATA SCIENCE\\Group Assignment\\WQD7001-Principle-of-Data-Science")
source("prediction_linear_regression.R")
source("prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
source("C:/Users/User/Downloads/Master Data Science/WQD7001 PRINCIPLES OF DATA SCIENCE/Group Assignment/WQD7001-Principle-of-Data-Science/prediction_linear_regression.R")
